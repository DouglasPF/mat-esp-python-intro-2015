1. Fizemos os clones dos membros do grupo a partir do Fork do disponibilizado pelo professor no GitHub com os comandos:
- $ git clone https://github.com/DouglasPF/mat-esp-python-intro-2015.git douglaspf
- $ git clone https://github.com/DouglasPF/mat-esp-python-intro-2015.git julyana
- $ git clone https://github.com/DouglasPF/mat-esp-python-intro-2015.git jonatan
2. Criamos uma nova pasta 'douglas-julyana-jonatan' no clone 'douglaspf' e dentro dela um arquivo bubble-sort.py
3. No bubble-sort.py codificamos o Phyton para executar uma lista, e coloca-la em ordem crescente com o seguinte código:
lista = [11, 18, 3, 1, 16, 12, 6, 19, 5, 0, 14, 4, 17, 9, 13, 7, 10, 15, 2, 8] #Valores da Lista
N = 20 #Numero de Elementos
for i in range(0, N-1, 1): #Andando do primeiro elemento até o penultimo de 1 em 1
    for j in range(i+1, N, 1): #Andando do elemento seguinte a 'i' até o ultimo de 1 em 1
        if lista[i] < lista[j]:
            continue
        else:
            temp = lista[i] #Para inverter os valores
            lista[i] = lista[j]
            lista[j] = temp
print(lista)
4. Rastreamos o arquivo 'bubble-sort.py' com o comando '$ git add bubble-sort.py'
5. Configuramos com o aluno que estava mexendo com o comando '$ git config user.name "douglas parreira de freitas"' e '$ git config user.email douglaspfreitas@live.com'
6. Fizemos um commit '$ git commit -m "Criei uma pasta douglas-julyana-jonatan e dentro dela um arquivo bubble-sort.py com as intruções do professor"'
7. E empurramos as atualizações para o GitHub com o comando '$ git push origin master'
8. Trocamos o membro do grupo, entrei na pasta do operador, no caso julyana, com o comando '$ cd julyana'
9. Na pasta, para baixar o arquivo, usei o comando '$ git pull origin master'
10. Modifiquei o arquivo bubble-sort.py para imprimir as listas: original (sem o algoritmo) e em ordem crescente(como algoritmo), 
usando os comandos print(lista original) e print(lista em ordem crescente) respectivamente
11. Rastreei o arquivo bubble-sort.py com o comando '$ git add bubble-sort.py'
12. Configurei o user name de acordo com o operador (julyana) com o comando '$ git config user.name "julyana" e '$ git config user.email julyanamarapodi@gmail.com
13. Fiz um commit com o comando $ git commit -m "modifiquei o arquivo para imprimir a lista original e em ordem crescente"
14. Empurrei a versão mais atual com o comando '$ git push origin master'
15. Trocamos o membro do grupo para o Jonatan e entramos no clone do membro com o comando '$ cd Jonatan'
16. Na pasta, para baixar o arquivo, usei o comando '$ git pull origin master'
17. Modifiquei o arquivo bubble-sort.py para imprimir as listas: cinco menores valores e cinco maiores valores, usando os comandos print("cinco menores valores", lista[0:5])e 
print("cinco maiores valores", lista[15:20]) respectivamente
18. Rastreei o arquivo bubble-sort.py com o comando '$ git add bubble-sort.py'
19. Configurei o user name de acordo com o operador (jonatan) com o comando '$ git config user.name "jonatan" e '$ git config user.email jonatan_henrique123@hotmail.com
20. Fiz um commit com o comando $ git commit -m "modifiquei o arquivo para imprimir a lista original e em ordem crescente"
21. Empurrei a versão mais atual com o comando '$ git push origin master' 

Tarefa 2
22. Trocamos o membro(Douglas) e entramos no clone com o comando '$ cd douglaspf'
23. Com o comando '$ git pull origin master' para atualizar o repositório
24. Criamos uma pasta chamada fig dentro do repositório douglaspf
25. Modificamos o programa para fazer um gráfico com os comandos:
 
import matplotlib.pyplot as plt
lista = [11, 18, 3, 1, 16, 12, 6, 19, 5, 0, 14, 4, 17, 9, 13, 7, 10, 15, 2, 8] #Valores da Lista
plt.figure() 
#Criamos uma figura vazia
plt.plot(range(0,20), lista, 'ok')
#Definimos x como 'range(0,20)' e y como a lista original, antes de ser modificada pelo algoritmo
plt.title("Lista Original")
#Título do Gráfico
plt.xlabel("Posição na lista")
#Nomeamos X
plt.ylabel("Valores da lista")
#Nomeamos Y
plt.savefig("bubble-inicio.png")
#Salvamos a figura
plt.close()
#Fechamos a figura

26. Agora modificamos novamente o programa, para fazer um gráfico agora com os valores da lista em ordem crescente, apenas repetindo o comando
depois do algoritmo:
N = 20
for i in range(0, N-1, 1): 
    for j in range(i+1, N, 1): 
        if lista[i] < lista[j]:
            continue
        else:
            temp = lista[i] #Para inverter os valores
            lista[i] = lista[j]
            lista[j] = temp
print("lista em ordem crescente", lista)
plt.figure() 
plt.plot(range(0,20), lista, 'ok')
plt.title("Lista Em Ordem Crescente")
plt.xlabel("Posição na lista")
plt.ylabel("Valores da lista")
plt.savefig("bubble-fim.png")
plt.close()

27. Rastreamos os arquivos pratica3passoapasso.txt, bubble-fim.png, bubble-inicio.png e bubble-sort.py com o comando "$ git add 'arquivo'"
28. Configurei com os dados do usuario com o comando '$ git config user.name "douglas parreira"' e '$ git config user.email douglaspfreitas@live'
29. Dei um commit com o comando '$ git commit -m "Fiz dois gráficos, um da lista original e outro da lista em ordem crescente, e salvei as imagens na pasta
fig, a partir do python, rastreei as imagens e o arquivo.bubble-sort.py"
30. Empurrei para o repositório com o comando '$ git push origin master'
31. Trocamos o membro do grupo para julyana, e com o comado '$ git pull origin master' atualizei a minha pasta
32. Modifiquei o arquivo fig para a fazer os gráficos para quando houvesse troca com os comandos no python:
a = 0
N = 20 #Numero de Elementos
for i in range(0, N-1, 1): #Andando do primeiro elemento até o penultimo de 1 em 1
    for j in range(i+1, N, 1): #Andando do elemento seguinte a 'i' até o ultimo de 1 em 1
        if lista[i] < lista[j]:
            continue
        else:
            temp = lista[i] #Para inverter os valores
            lista[i] = lista[j]
            lista[j] = temp
            plt.figure()
            plt.plot(range(0,20), lista, 'ok')
            plt.title("Lista Em Cada Troca")
            plt.xlabel("Posição na lista")
            plt.ylabel("Valores da lista")        
            a = a + 1
            plt.savefig("bubble-troca{}.png".format(a))
			plt.close()
33. Adicionamos todos os gráficos no bash com o comando '$ git add fig'
34. Configurei com os comandos '$ git config user.name "julyana"' e '$ git config user.email julyanamarapodi@gmail'
35. Utilizei o comando '$ git commit -m "gráficos quando houver troca foram acrescentados"
36. '$ git push origin master' para enviar as atualizações para o Repositório






